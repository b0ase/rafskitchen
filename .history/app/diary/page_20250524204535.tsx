'use client';

import React, { useState, useEffect, FormEvent, useCallback } from 'react';
import Link from 'next/link';
import { FaPlusCircle, FaRegSquare, FaCheckSquare, FaTimes, FaTrash, FaTasks } from 'react-icons/fa';
import getSupabaseBrowserClient from '@/lib/supabase/client';

interface ActionItem {
  id: string;
  diary_entry_id: string;
  user_id: string;
  created_at: string;
  text: string;
  is_completed: boolean;
  sent_to_wip_at: string | null;
  wip_task_id: string | null;
  order_val?: number | null;
}

interface DiaryEntry {
  id: string;
  user_id: string;
  created_at: string;
  entry_timestamp: string;
  title: string;
  summary: string;
  diary_action_items: ActionItem[];
}

interface BoaseTask {
  id?: string; // Optional because it's generated by DB
  task_description: string;
  user_id: string;
  status: string; // e.g., 'pending', 'in progress', 'completed'
  project_scope_id?: string | null; // Optional
  source_diary_entry_id?: string | null; // Optional, if we want a direct link on b0ase_tasks
}

export default function DiaryPage() {
  const supabase = getSupabaseBrowserClient();
  const [entries, setEntries] = useState<DiaryEntry[]>([]);
  const [isLoadingEntries, setIsLoadingEntries] = useState(true);
  const [errorLoadingEntries, setErrorLoadingEntries] = useState<string | null>(null);
  const [isClient, setIsClient] = useState(false);

  const [showAddEntryModal, setShowAddEntryModal] = useState(false);
  const [newEntryTitle, setNewEntryTitle] = useState('');
  const [newEntrySummary, setNewEntrySummary] = useState('');
  const [newEntryActionItemTexts, setNewEntryActionItemTexts] = useState<string[]>(['']);
  const [isSubmittingEntry, setIsSubmittingEntry] = useState(false);

  // State for "Create Tasks from Diary Entry" Modal
  const [showCreateTasksModal, setShowCreateTasksModal] = useState(false);
  const [currentDiaryEntryForTasks, setCurrentDiaryEntryForTasks] = useState<DiaryEntry | null>(null);
  const [newTaskDescriptions, setNewTaskDescriptions] = useState<string[]>(['']);
  const [isSubmittingTasks, setIsSubmittingTasks] = useState(false);

  // Demo data for realistic diary entries
  const demoEntries: DiaryEntry[] = [
    {
      id: 'demo-entry-1',
      user_id: 'raf-user-id',
      created_at: new Date(Date.now() - 2 * 60 * 60 * 1000).toISOString(), // 2 hours ago
      entry_timestamp: new Date(Date.now() - 2 * 60 * 60 * 1000).toISOString(),
      title: 'RafsKitchen AI Assistant Planning Session',
      summary: "Had a productive brainstorming session with the team about the new AI kitchen assistant feature. We discussed voice recognition capabilities, recipe suggestions based on available ingredients, and smart cooking timer integration. The team is excited about the potential to revolutionize home cooking through AI. Sarah presented some compelling mockups for the voice interface, and Michael outlined the technical architecture for ingredient recognition using computer vision.",
      diary_action_items: [
        {
          id: 'demo-action-1-1',
          diary_entry_id: 'demo-entry-1',
          user_id: 'raf-user-id',
          created_at: new Date().toISOString(),
          text: 'Research existing voice recognition APIs for kitchen environments',
          is_completed: false,
          sent_to_wip_at: null,
          wip_task_id: null,
          order_val: 1
        },
        {
          id: 'demo-action-1-2',
          diary_entry_id: 'demo-entry-1',
          user_id: 'raf-user-id',
          created_at: new Date().toISOString(),
          text: 'Create prototype for ingredient recognition system',
          is_completed: false,
          sent_to_wip_at: null,
          wip_task_id: null,
          order_val: 2
        },
        {
          id: 'demo-action-1-3',
          diary_entry_id: 'demo-entry-1',
          user_id: 'raf-user-id',
          created_at: new Date().toISOString(),
          text: 'Schedule user testing sessions for voice interface',
          is_completed: true,
          sent_to_wip_at: null,
          wip_task_id: null,
          order_val: 3
        }
      ]
    },
    {
      id: 'demo-entry-2',
      user_id: 'raf-user-id',
      created_at: new Date(Date.now() - 1 * 24 * 60 * 60 * 1000).toISOString(), // 1 day ago
      entry_timestamp: new Date(Date.now() - 1 * 24 * 60 * 60 * 1000).toISOString(),
      title: 'Restaurant Partnership Meeting - Bella Vista',
      summary: "Met with the owners of Bella Vista restaurant to discuss integrating our food delivery platform with their existing POS system. They're very interested in the real-time inventory tracking and automated ordering features. The discussion covered integration timelines, staff training requirements, and revenue sharing models. They want to be our pilot restaurant for the new smart ordering system.",
      diary_action_items: [
        {
          id: 'demo-action-2-1',
          diary_entry_id: 'demo-entry-2',
          user_id: 'raf-user-id',
          created_at: new Date().toISOString(),
          text: 'Prepare integration proposal for Bella Vista POS system',
          is_completed: true,
          sent_to_wip_at: new Date().toISOString(),
          wip_task_id: 'demo-wip-task-1',
          order_val: 1
        },
        {
          id: 'demo-action-2-2',
          diary_entry_id: 'demo-entry-2',
          user_id: 'raf-user-id',
          created_at: new Date().toISOString(),
          text: 'Draft partnership agreement terms',
          is_completed: false,
          sent_to_wip_at: null,
          wip_task_id: null,
          order_val: 2
        }
      ]
    },
    {
      id: 'demo-entry-3',
      user_id: 'raf-user-id',
      created_at: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000).toISOString(), // 3 days ago
      entry_timestamp: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000).toISOString(),
      title: 'Tech Innovation Sprint Review',
      summary: "Completed our two-week sprint focused on blockchain integration for supply chain tracking. The proof of concept is working well - we can now track ingredients from farm to table with immutable records. The team successfully implemented smart contracts for quality verification and automated payments to suppliers. Next sprint will focus on user interface improvements and mobile app integration.",
      diary_action_items: [
        {
          id: 'demo-action-3-1',
          diary_entry_id: 'demo-entry-3',
          user_id: 'raf-user-id',
          created_at: new Date().toISOString(),
          text: 'Document blockchain integration best practices',
          is_completed: true,
          sent_to_wip_at: null,
          wip_task_id: null,
          order_val: 1
        },
        {
          id: 'demo-action-3-2',
          diary_entry_id: 'demo-entry-3',
          user_id: 'raf-user-id',
          created_at: new Date().toISOString(),
          text: 'Plan user interface improvements for next sprint',
          is_completed: false,
          sent_to_wip_at: null,
          wip_task_id: null,
          order_val: 2
        }
      ]
    }
  ];

  const fetchDiaryEntries = useCallback(async () => {
    setIsLoadingEntries(true);
    setErrorLoadingEntries(null);
    try {
      const { data: sessionData, error: sessionError } = await supabase.auth.getSession();
      if (sessionError || !sessionData.session) {
        // For demo purposes, show demo entries instead of requiring auth
        setEntries(demoEntries);
        setIsLoadingEntries(false);
        return;
      }

      const { data, error } = await supabase
        .from('diary_entries')
        .select(`
          id, user_id, created_at, entry_timestamp, title, summary,
          diary_action_items (*)
        `)
        .eq('user_id', sessionData.session.user.id)
        .order('entry_timestamp', { ascending: false })
        .order('created_at', { referencedTable: 'diary_action_items', ascending: true });

      if (error) {
        console.error('Error fetching diary entries:', error);
        setErrorLoadingEntries(`Failed to load diary entries: ${error.message}`);
        // Fall back to demo entries
        setEntries(demoEntries);
      } else {
        const fetchedEntries = data || [];
        // If no real entries, show demo entries
        setEntries(fetchedEntries.length > 0 ? fetchedEntries : demoEntries);
      }
    } catch (e: any) {
      console.error('Unexpected error fetching entries:', e);
      setErrorLoadingEntries(`An unexpected error occurred: ${e.message}`);
      // Fall back to demo entries
      setEntries(demoEntries);
    } finally {
      setIsLoadingEntries(false);
    }
  }, [supabase, demoEntries]);

  useEffect(() => {
    setIsClient(true);
    fetchDiaryEntries();
  }, [fetchDiaryEntries]);

  const toggleActionItem = async (actionItemId: string) => {
    const entryIndex = entries.findIndex(entry => entry.diary_action_items.some(ai => ai.id === actionItemId));
    if (entryIndex === -1) return;

    const actionItemIndex = entries[entryIndex].diary_action_items.findIndex(ai => ai.id === actionItemId);
    if (actionItemIndex === -1) return;

    const currentItem = entries[entryIndex].diary_action_items[actionItemIndex];
    const newCompletedStatus = !currentItem.is_completed;

    const updatedEntries = entries.map(entry => ({
      ...entry,
      diary_action_items: entry.diary_action_items.map(ai => 
        ai.id === actionItemId ? { ...ai, is_completed: newCompletedStatus } : ai
      )
    }));
    setEntries(updatedEntries);

    const { error } = await supabase
      .from('diary_action_items')
      .update({ is_completed: newCompletedStatus })
      .eq('id', actionItemId);

    if (error) {
      console.error('Error updating action item:', error);
      setEntries(entries);
      alert(`Failed to update action item: ${error.message}`);
    }
  };

  const handleActionItemTextChange = (index: number, value: string) => {
    const updatedTexts = [...newEntryActionItemTexts];
    updatedTexts[index] = value;
    setNewEntryActionItemTexts(updatedTexts);
  };

  const addActionItemInput = () => {
    setNewEntryActionItemTexts([...newEntryActionItemTexts, '']);
  };

  const removeActionItemInput = (index: number) => {
    if (newEntryActionItemTexts.length > 1) {
      const updatedTexts = newEntryActionItemTexts.filter((_, i) => i !== index);
      setNewEntryActionItemTexts(updatedTexts);
    }
  };

  const handleAddEntryModalSubmit = async (e: FormEvent) => {
    e.preventDefault();
    setIsSubmittingEntry(true);

    const payload = {
      title: newEntryTitle,
      summary: newEntrySummary,
      action_items: newEntryActionItemTexts.map(text => text.trim()).filter(text => text !== ''),
    };

    try {
      const response = await fetch('/api/v1/diary/entries', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(payload),
      });

      const result = await response.json();

      if (!response.ok) {
        throw new Error(result.error || `API request failed with status ${response.status}`);
      }

      console.log('Diary entry created via API:', result);

      setShowAddEntryModal(false);
      setNewEntryTitle('');
      setNewEntrySummary('');
      setNewEntryActionItemTexts(['']);
      fetchDiaryEntries();
      alert('Diary entry added successfully via API!');

    } catch (error: any) {
      console.error('Error adding diary entry via API:', error);
      alert(`Failed to add diary entry: ${error.message}`);
    } finally {
      setIsSubmittingEntry(false);
    }
  };

  const allActionItems = entries.reduce((acc, entry) => {
    if (entry.diary_action_items) {
      acc.push(...entry.diary_action_items);
    }
    return acc;
  }, [] as ActionItem[]);

  const outstandingActionItems = allActionItems.filter(item => !item.is_completed);

  const handleCreateActionItemsFromEntry = (entry: DiaryEntry) => {
    setCurrentDiaryEntryForTasks(entry);
    setNewTaskDescriptions(['']);
    setShowCreateTasksModal(true);
  };

  const handleSubmitCreateTasks = async (e: FormEvent) => {
    e.preventDefault();
    if (!currentDiaryEntryForTasks) {
      alert('Error: No diary entry selected.');
      return;
    }

    setIsSubmittingTasks(true);

    const { data: sessionData, error: sessionError } = await supabase.auth.getSession();
    if (sessionError || !sessionData.session) {
      alert('Authentication error. Please log in and try again.');
      setIsSubmittingTasks(false);
      return;
    }
    const userId = sessionData.session.user.id;

    try {
      const tasksToInsert = newTaskDescriptions
        .map(desc => desc.trim())
        .filter(desc => desc !== '');

      if (tasksToInsert.length === 0) {
        alert('Please enter at least one task description.');
        return;
      }

      for (const taskDesc of tasksToInsert) {
        const { data: newTaskData, error: taskInsertError } = await supabase
          .from('b0ase_tasks')
          .insert({
            text: taskDesc,
            user_id: userId,
            status: 'TO_DO',
            source_diary_entry_id: currentDiaryEntryForTasks.id,
          })
          .select('id')
          .single();

        if (taskInsertError) {
          throw new Error(`Failed to create task "${taskDesc}": ${taskInsertError.message}`);
        }

        if (!newTaskData || !newTaskData.id) {
          throw new Error(`Failed to get ID for created task "${taskDesc}".`);
        }

        const newTaskId = newTaskData.id;

        const { error: linkInsertError } = await supabase
          .from('diary_task_links')
          .insert({
            diary_entry_id: currentDiaryEntryForTasks.id,
            task_id: newTaskId,
            user_id: userId,
          });

        if (linkInsertError) {
          console.warn(`Failed to link task ${newTaskId} to diary entry. Attempting to delete orphaned task.`);
          await supabase.from('b0ase_tasks').delete().eq('id', newTaskId);
          throw new Error(`Failed to link task "${taskDesc}" to diary entry: ${linkInsertError.message}`);
        }
      }

      alert('Tasks created and linked to diary entry successfully!');
      setShowCreateTasksModal(false);
      setCurrentDiaryEntryForTasks(null);
      setNewTaskDescriptions(['']);

    } catch (error: any) {
      console.error('Error creating tasks from diary entry:', error);
      alert(`An error occurred: ${error.message}`);
    } finally {
      setIsSubmittingTasks(false);
    }
  };

  const handleSendToWIP = async (actionItem: ActionItem) => {
    if (!actionItem || !actionItem.id || actionItem.sent_to_wip_at) {
      alert('This item has already been sent to WIP or is invalid.');
      return;
    }

    const { data: sessionData, error: sessionError } = await supabase.auth.getSession();
    if (sessionError || !sessionData.session) {
      alert('Authentication error. Please log in and try again.');
      return;
    }
    const userId = sessionData.session.user.id;

    try {
      const { data: newTaskData, error: taskInsertError } = await supabase
        .from('b0ase_tasks')
        .insert({
          text: actionItem.text,
          user_id: userId,
          status: 'TO_DO',
          source_diary_action_item_id: actionItem.id,
        })
        .select('id')
        .single();

      if (taskInsertError) {
        throw new Error(`Failed to create task in WIP: ${taskInsertError.message}`);
      }

      if (!newTaskData || !newTaskData.id) {
        throw new Error('Failed to get ID for the created WIP task.');
      }

      const newWipTaskId = newTaskData.id;
      const currentTime = new Date().toISOString();

      const { error: updateActionItemError } = await supabase
        .from('diary_action_items')
        .update({
          sent_to_wip_at: currentTime,
          wip_task_id: newWipTaskId,
          is_completed: true,
        })
        .eq('id', actionItem.id);

      if (updateActionItemError) {
        console.warn('Failed to update action item after creating WIP task. Attempting to delete orphaned WIP task.');
        await supabase.from('b0ase_tasks').delete().eq('id', newWipTaskId);
        throw new Error(`Failed to update diary action item: ${updateActionItemError.message}`);
      }

      setEntries(prevEntries =>
        prevEntries.map(entry => ({
          ...entry,
          diary_action_items: entry.diary_action_items.map(ai =>
            ai.id === actionItem.id
              ? { ...ai, sent_to_wip_at: currentTime, wip_task_id: newWipTaskId, is_completed: true }
              : ai
          ),
        }))
      );

      alert('Action item sent to WIP successfully and marked as completed here.');

    } catch (error: any) {
      console.error('Error sending action item to WIP:', error);
      alert(`An error occurred: ${error.message}`);
    }
  };

  return (
    <div className="min-h-screen bg-white text-black flex flex-col">
      <main className="flex-grow container mx-auto px-4 py-12 md:py-16">
        <div className="mb-8 flex justify-end items-center">
          <button 
            onClick={() => setShowAddEntryModal(true)}
            className="inline-flex items-center bg-cyan-600 hover:bg-cyan-700 text-white font-medium py-2 px-4 rounded-md transition-colors"
          >
            <FaPlusCircle className="mr-2" />
            Add New Diary Entry
          </button>
        </div>

        <div className="mb-10 grid grid-cols-1 md:grid-cols-2 gap-6">
          {[
            { href: '/workinprogress', title: 'Work In Progress', description: 'View and manage current tasks and project statuses.', bgColor: 'bg-purple-50', hoverBgColor: 'hover:bg-purple-100', borderColor: 'border-purple-200', titleColor: 'text-purple-700'},
            { href: '/gigs/calendar', title: 'Calendar', description: 'Check deadlines, scheduled learning, and important dates.', bgColor: 'bg-teal-50', hoverBgColor: 'hover:bg-teal-100', borderColor: 'border-teal-200', titleColor: 'text-teal-700'},
          ].map((card) => (
            <Link key={card.href} href={card.href} className={`block p-6 border shadow-lg transition-all duration-300 ease-in-out transform hover:-translate-y-1 group ${card.bgColor} ${card.hoverBgColor} ${card.borderColor}`}>
              <h3 className={`text-xl font-semibold mb-2 group-hover:text-gray-900 ${card.titleColor}`}>{card.title}</h3>
              <p className="text-sm text-gray-600 group-hover:text-gray-700">{card.description}</p>
            </Link>
          ))}
        </div>

        {isClient && outstandingActionItems.length > 0 && (
          <section className="mb-10 p-6 bg-yellow-50 border border-yellow-200 rounded-lg shadow-lg">
            <h2 className="text-xl font-semibold text-yellow-800 mb-4">Action Items Hotlist ({outstandingActionItems.length} outstanding)</h2>
            <ul className="space-y-2">
              {outstandingActionItems.map(item => (
                <li key={item.id} className="flex items-center text-gray-700">
                  {item.is_completed ? <FaCheckSquare className="mr-2 text-green-600" /> : <FaRegSquare className="mr-2 text-yellow-600" />}
                  {item.text}
                </li>
              ))}
            </ul>
          </section>
        )}

        {isLoadingEntries && <p className="text-center text-gray-600 py-8">Loading diary entries...</p>}
        {errorLoadingEntries && <p className="text-center text-red-600 py-8">{errorLoadingEntries}</p>}
        
        {!isLoadingEntries && !errorLoadingEntries && entries.length > 0 && (
          <div className="space-y-8">
            {entries.map(entry => (
              <article key={entry.id} className="bg-white p-6 md:p-8 border border-gray-200 shadow-xl rounded-lg">
                <header className="pb-3 border-b border-gray-200">
                  <div className="mb-3">
                    <p className="text-lg font-medium text-gray-600">
                      {isClient ? new Date(entry.entry_timestamp).toLocaleDateString(undefined, { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' }) : 'Loading date...'}
                    </p>
                    <p className="text-sm text-gray-500">
                      {isClient ? `${new Date(entry.entry_timestamp).toLocaleTimeString(undefined, { hour: '2-digit', minute:'2-digit' })} (${( (Date.now() - new Date(entry.entry_timestamp).getTime()) / (1000 * 60 * 60) ).toFixed(1)} hours ago)` : 'Loading time...'}
                    </p>
                  </div>
                  <h2 className="text-2xl font-semibold text-cyan-600">{entry.title}</h2>
                </header>
                <div className="prose prose-sm max-w-none text-gray-700 mt-4 mb-4">
                  <p>{entry.summary}</p>
                </div>
                <div className="mt-4">
                  <button
                    onClick={() => handleCreateActionItemsFromEntry(entry)}
                    className="bg-cyan-600 hover:bg-cyan-700 text-white font-medium py-2 px-3 rounded-md transition-colors text-sm inline-flex items-center"
                  >
                    <FaTasks className="mr-2" />
                    Create Action Items
                  </button>
                </div>
                {entry.diary_action_items && entry.diary_action_items.length > 0 && (
                  <div className="mt-4">
                    <h4 className="font-semibold text-gray-800 mb-2">Action Items from this entry:</h4>
                    <ul className="space-y-1 list-inside">
                      {entry.diary_action_items.map(actionItem => (
                        <li key={actionItem.id} className="flex items-center justify-between text-sm text-gray-600 group">
                          <div onClick={() => toggleActionItem(actionItem.id)} className="flex items-center cursor-pointer flex-grow hover:text-gray-800">
                            {actionItem.is_completed ? <FaCheckSquare className="mr-2 text-green-600 flex-shrink-0" /> : <FaRegSquare className="mr-2 text-yellow-600 flex-shrink-0" />}
                            <span className={actionItem.is_completed ? 'line-through text-gray-500' : ''}>{actionItem.text}</span>
                          </div>
                          <button
                            onClick={() => handleSendToWIP(actionItem)}
                            disabled={actionItem.sent_to_wip_at !== null}
                            className="ml-3 px-2 py-1 text-xs bg-cyan-600 hover:bg-cyan-700 text-white rounded disabled:opacity-50 disabled:cursor-not-allowed transition-opacity duration-150"
                          >
                            {actionItem.sent_to_wip_at ? 'Sent' : 'Send to WIP'}
                          </button>
                        </li>
                      ))}
                    </ul>
                  </div>
                )}
              </article>
            ))}
          </div>
        )}
        {!isLoadingEntries && !errorLoadingEntries && entries.length === 0 && (
          <p className="text-gray-500 italic text-center py-8">No diary entries yet. Click &quot;Add New Diary Entry&quot; to create the first one!</p>
        )}

      </main>

      {showAddEntryModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4 overflow-y-auto">
          <div className="bg-white p-6 md:p-8 rounded-lg shadow-2xl w-full max-w-2xl border border-gray-200 my-8">
            <div className="flex justify-between items-center mb-6">
              <h2 className="text-2xl font-semibold text-black">Add New Diary Entry</h2>
              <button onClick={() => setShowAddEntryModal(false)} className="text-gray-600 hover:text-gray-800" disabled={isSubmittingEntry}>
                <FaTimes size={20} />
              </button>
            </div>
            <form onSubmit={handleAddEntryModalSubmit}>
              <div className="mb-4">
                <label htmlFor="newEntryTitle" className="block text-sm font-medium text-gray-700 mb-1">Title</label>
                <input 
                  type="text" 
                  id="newEntryTitle"
                  value={newEntryTitle}
                  onChange={(e) => setNewEntryTitle(e.target.value)}
                  required
                  className="w-full px-3 py-2 bg-white border border-gray-300 rounded-md text-gray-900 focus:ring-2 focus:ring-cyan-500 focus:border-cyan-500 outline-none"
                />
              </div>
              <div className="mb-4">
                <label htmlFor="newEntrySummary" className="block text-sm font-medium text-gray-700 mb-1">Summary (Your Narrative)</label>
                <textarea 
                  id="newEntrySummary"
                  value={newEntrySummary}
                  onChange={(e) => setNewEntrySummary(e.target.value)}
                  required
                  rows={5}
                  className="w-full px-3 py-2 bg-white border border-gray-300 rounded-md text-gray-900 focus:ring-2 focus:ring-cyan-500 focus:border-cyan-500 outline-none"
                  placeholder="Describe the discussion, decisions, and context..."
                />
              </div>

              <div className="mb-4">
                <h3 className="text-lg font-medium text-gray-800 mb-2">Action Items</h3>
                {newEntryActionItemTexts.map((text, index) => (
                  <div key={index} className="flex items-center space-x-2 mb-2">
                    <input 
                      type="text"
                      value={text}
                      onChange={(e) => handleActionItemTextChange(index, e.target.value)}
                      placeholder={`Action Item ${index + 1}`}
                      className="flex-grow px-3 py-2 bg-white border border-gray-300 rounded-md text-gray-900 focus:ring-1 focus:ring-cyan-500 focus:border-cyan-500 outline-none text-sm"
                    />
                    {newEntryActionItemTexts.length > 1 && (
                      <button 
                        type="button"
                        onClick={() => removeActionItemInput(index)}
                        className="p-2 text-red-500 hover:text-red-600"
                        aria-label="Remove Action Item"
                      >
                        <FaTrash />
                      </button>
                    )}
                  </div>
                ))}
                <button 
                  type="button"
                  onClick={addActionItemInput}
                  className="mt-1 text-sm text-cyan-600 hover:text-cyan-700 inline-flex items-center"
                >
                  <FaPlusCircle className="mr-1.5" /> Add Action Item
                </button>
              </div>
              
              <div className="flex justify-end space-x-3 mt-8">
                <button 
                  type="button" 
                  onClick={() => setShowAddEntryModal(false)} 
                  disabled={isSubmittingEntry}
                  className="px-4 py-2 text-sm font-medium text-gray-700 bg-gray-100 hover:bg-gray-200 rounded-md transition-colors disabled:opacity-50"
                >
                  Cancel
                </button>
                <button 
                  type="submit" 
                  disabled={isSubmittingEntry || !newEntryTitle.trim() || !newEntrySummary.trim()}
                  className="px-4 py-2 text-sm font-medium text-white bg-cyan-600 hover:bg-cyan-700 rounded-md transition-colors disabled:opacity-50"
                >
                  {isSubmittingEntry ? 'Saving...' : 'Save Entry'}
                </button>
              </div>
            </form>
          </div>
        </div>
      )}

      {/* Modal for Creating Tasks from Diary Entry */}
      {showCreateTasksModal && currentDiaryEntryForTasks && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4 overflow-y-auto">
          <div className="bg-white p-6 md:p-8 rounded-lg shadow-2xl w-full max-w-2xl border border-gray-200 my-8">
            <div className="flex justify-between items-center mb-6">
              <h2 className="text-2xl font-semibold text-black">Create Tasks from Diary Entry</h2>
              <button 
                onClick={() => setShowCreateTasksModal(false)} 
                className="text-gray-600 hover:text-gray-800"
                disabled={isSubmittingTasks}
              >
                <FaTimes size={20} />
              </button>
            </div>
            
            <div className="mb-4 p-4 bg-gray-50 rounded-md border border-gray-200">
              <h3 className="text-lg font-semibold text-cyan-600 mb-1">Source: {currentDiaryEntryForTasks.title}</h3>
              <p className="text-sm text-gray-600 line-clamp-3">{currentDiaryEntryForTasks.summary}</p>
            </div>

            <form onSubmit={handleSubmitCreateTasks}>
              <div className="mb-4">
                <h3 className="text-lg font-medium text-gray-800 mb-2">New Tasks:</h3>
                {newTaskDescriptions.map((desc, index) => (
                  <div key={index} className="flex items-center space-x-2 mb-2">
                    <input
                      type="text"
                      value={desc}
                      onChange={(e) => {
                        const updatedDescs = [...newTaskDescriptions];
                        updatedDescs[index] = e.target.value;
                        setNewTaskDescriptions(updatedDescs);
                      }}
                      placeholder={`Task ${index + 1} description`}
                      className="flex-grow px-3 py-2 bg-white border border-gray-300 rounded-md text-gray-900 focus:ring-1 focus:ring-cyan-500 focus:border-cyan-500 outline-none text-sm"
                      required
                    />
                    {newTaskDescriptions.length > 1 && (
                      <button
                        type="button"
                        onClick={() => {
                          const updatedDescs = newTaskDescriptions.filter((_, i) => i !== index);
                          setNewTaskDescriptions(updatedDescs);
                        }}
                        className="p-2 text-red-500 hover:text-red-400"
                        aria-label="Remove Task"
                        disabled={isSubmittingTasks}
                      >
                        <FaTrash />
                      </button>
                    )}
                  </div>
                ))}
                <button
                  type="button"
                  onClick={() => setNewTaskDescriptions([...newTaskDescriptions, ''])}
                  className="mt-1 text-sm text-cyan-600 hover:text-cyan-500 inline-flex items-center"
                  disabled={isSubmittingTasks}
                >
                  <FaPlusCircle className="mr-1.5" /> Add Another Task
                </button>
              </div>

              <div className="flex justify-end space-x-3 mt-8">
                <button
                  type="button"
                  onClick={() => setShowCreateTasksModal(false)}
                  disabled={isSubmittingTasks}
                  className="px-4 py-2 text-sm font-medium text-gray-700 bg-gray-100 hover:bg-gray-200 rounded-md transition-colors disabled:opacity-50"
                >
                  Cancel
                </button>
                <button
                  type="submit"
                  disabled={isSubmittingTasks || newTaskDescriptions.every(desc => desc.trim() === '')}
                  className="px-4 py-2 text-sm font-medium text-white bg-green-600 hover:bg-green-500 rounded-md transition-colors disabled:opacity-50"
                >
                  {isSubmittingTasks ? 'Saving Tasks...' : 'Save Tasks to WIP'}
                </button>
              </div>
            </form>
          </div>
        </div>
      )}
    </div>
  );
} 